{"version":3,"sources":["carousel.js","../src/carousel.ts","utils.js","../src/utils.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","exports","utils_1","require","Carousel","element","options","_timeout","_stop","_paused","_time","_running","assign","autoplay","prev","progress","loop","carousel","controller","querySelector","items","querySelectorAll","nodes","Array","from","maxLength","maxArrayLength","Error","classList","add","activeItem","buildHeight","createKey","initCtrl","regeneratorRuntime","mark","_callee","_this","wrap","_context","createProgress","createPrev","prevCtrl","addEventListener","stop","prevItem","createNext","nextCtrl","nextItem","console","error","log","Date","getTime","autoplayNext","pastTime","Math","round","Number","_callee2","index","stp","_context2","abrupt","indexOf","startProgress","timer","document","hidden","_this2","clearTimeout","_call","setTimeout","setAttribute","toString","maxHeight","height","getElementsByClassName","offsetHeight","style","concat","createElement","progressEle","appendChild","newProgressBarItem","inner","_callee3","timeoutPrecent","percent","_context3","moveProgress","progressBar","getElementsByTagName","remove","width","div","innerHTML","innerText","activeIndex","nextIndex","prevIndex","ms","r"],"mappings":"AAAA,aAEA,SAASA,gBAAgBC,EAAUC,GAAe,KAAMD,aAAoBC,GAAgB,MAAM,IAAIC,UAAU,qCAEhH,SAASC,kBAAkBC,EAAQC,GAAS,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,IAAIE,EAAaH,EAAMC,GAAIE,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAE7S,SAASO,aAAad,EAAae,EAAYC,GAAmJ,OAAhID,GAAYb,kBAAkBF,EAAYiB,UAAWF,GAAiBC,GAAad,kBAAkBF,EAAagB,GAAqBhB,EAEzM,IAAIkB,UAAYC,MAAQA,KAAKD,WAAa,SAAUE,EAASC,EAAYC,EAAGC,GAC1E,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GACjD,SAASC,EAAUC,GACjB,IACEC,EAAKN,EAAUO,KAAKF,IACpB,MAAOG,GACPL,EAAOK,IAIX,SAASC,EAASJ,GAChB,IACEC,EAAKN,EAAiB,MAAEK,IACxB,MAAOG,GACPL,EAAOK,IAIX,SAASF,EAAKI,GACZA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,EAAE,SAAUG,GACpDA,EAAQQ,EAAOL,SACdO,KAAKR,EAAWK,GAGrBH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,WAIlEnB,OAAOC,eAAeyB,QAAS,aAAc,CAC3CT,OAAO,IAGT,IAAIU,QAAUC,QAAQ,WAElBC,SAEJ,WACE,SAASA,EAASC,EAASC,GACzB5C,gBAAgBqB,KAAMqB,GAEtBrB,KAAKwB,UAAW,EAChBxB,KAAKyB,OAAQ,EACbzB,KAAK0B,SAAU,EACf1B,KAAK2B,MAAQ,EACb3B,KAAK4B,UAAW,EAgBhB,GARA5B,KAAKuB,QAAU/B,OAAOqC,OAAO,GAPd,CACbC,SAAU,EACVC,MAAM,EACNpB,MAAM,EACNqB,UAAU,EACVC,MAAM,GAEmCV,GAC3CvB,KAAKkC,SAAWZ,EAChBtB,KAAKmC,WAAanC,KAAKkC,SAASE,cAAc,yBAC9CpC,KAAKqC,MAAQrC,KAAKkC,SAASI,iBAAiB,0BAC5CtC,KAAKuC,MAAQC,MAAMC,KAAKzC,KAAKqC,OAC7BrC,KAAK0C,UAAY1C,KAAKqC,MAAMlD,OAC5Ba,KAAK2C,eAAiB3C,KAAK0C,UAAY,EAEnC1C,KAAK0C,WAAa,EACpB,MAAM,IAAIE,MAAM,sDAGb5C,KAAKkC,SAASE,cAAc,kCAC/BpC,KAAKqC,MAAM,GAAGQ,UAAUC,IAAI,UAG9B9C,KAAK+C,WAAa/C,KAAKkC,SAASE,cAAc,iCAC9CpC,KAAKgD,cACLhD,KAAKiD,YAELjD,KAAKkD,WAiYP,OA9XAvD,aAAa0B,EAAU,CAAC,CACtB3B,IAAK,WACLe,MAAO,WACL,OAAOV,UAAUC,UAAM,OAAQ,EAE/BmD,mBAAmBC,KAAK,SAASC,IAC/B,IAAIC,EAAQtD,KAEZ,OAAOmD,mBAAmBI,KAAK,SAAkBC,GAC/C,OACE,OAAQA,EAASzB,KAAOyB,EAAS7C,MAC/B,KAAK,EACH,GAAIX,KAAKmC,WAAY,CACnBqB,EAAS7C,KAAO,EAChB,MAGF,MAAM,IAAIiC,MAAM,oEAElB,KAAK,EACH,IAAK5C,KAAKuB,QAAQS,SAAU,CAC1BwB,EAAS7C,KAAO,EAChB,MAIF,OADA6C,EAAS7C,KAAO,EACTX,KAAKyD,iBAEd,KAAK,EACH,IAAMzD,KAAKuB,QAAQQ,OAAQ/B,KAAKmC,WAAa,CAC3CqB,EAAS7C,KAAO,GAChB,MAIF,OADA6C,EAAS7C,KAAO,EACTX,KAAK0D,aAEd,KAAK,EACH1D,KAAK2D,SAAW3D,KAAKmC,WAAWC,cAAc,SAC9CpC,KAAK2D,SAASC,iBAAiB,QAAS,WACtCN,EAAMO,OAENP,EAAMQ,aAGV,KAAK,GACH,IAAM9D,KAAKuB,QAAQZ,OAAQX,KAAKmC,WAAa,CAC3CqB,EAAS7C,KAAO,GAChB,MAIF,OADA6C,EAAS7C,KAAO,GACTX,KAAK+D,aAEd,KAAK,GACH/D,KAAKgE,SAAWhE,KAAKmC,WAAWC,cAAc,SAC9CpC,KAAKgE,SAASJ,iBAAiB,QAAS,WACtCN,EAAMO,OAENP,EAAMW,aAGV,KAAK,GAKCjE,KAAKuB,QAAQO,WACsB,iBAA1B9B,KAAKuB,QAAQO,SACtBoC,QAAQC,MAAM,oCACLnE,KAAKuB,QAAQO,UAAY,IAClCoC,QAAQC,MAAM,qCAEdnE,KAAK8B,YAIX,KAAK,GACL,IAAK,MACH,OAAO0B,EAASK,SAGrBR,EAASrD,WAGf,CACDN,IAAK,YACLe,MAAO,WACLyD,QAAQE,IAAI,WAEb,CACD1E,IAAK,WACLe,MAAO,WACLyD,QAAQE,IAAI,WAEb,CACD1E,IAAK,OACLe,MAAO,WACL,OAAO,IAAI4D,MAAOC,UAAYtE,KAAK2B,QAEpC,CACDjC,IAAK,WACLe,MAAO,WACLT,KAAKwB,SAAWxB,KAAKuB,QAAQO,SAC7B9B,KAAKuE,iBAEN,CACD7E,IAAK,QACLe,MAAO,WACL,IAAIT,KAAK0B,SAAY1B,KAAK4B,SAA1B,CAGA,IAAI4C,GAAW,IAAIH,MAAOC,UAAYtE,KAAK2B,MAE3C3B,KAAKwB,SAAWiD,KAAKC,MAAMC,OAAO3E,KAAKwB,UAAYgD,GAAY,EAC/DxE,KAAK0B,SAAU,EACf1B,KAAK4B,UAAW,EAChB5B,KAAK2B,MAAQ,KAEd,CACDjC,IAAK,OACLe,MAAO,YACAT,KAAK0B,SAAW1B,KAAK4B,WAE1B5B,KAAK0B,SAAU,EACf1B,KAAKuE,kBAEN,CACD7E,IAAK,eACLe,MAAO,WACL,OAAOV,UAAUC,UAAM,OAAQ,EAE/BmD,mBAAmBC,KAAK,SAASwB,IAC/B,IAAIC,EAAOC,EACX,OAAO3B,mBAAmBI,KAAK,SAAmBwB,GAChD,OACE,OAAQA,EAAUhD,KAAOgD,EAAUpE,MACjC,KAAK,EACH,IAAKX,KAAK4B,SAAU,CAClBmD,EAAUpE,KAAO,EACjB,MAGF,OAAOoE,EAAUC,OAAO,UAE1B,KAAK,EACHhF,KAAK4B,UAAW,EAChB5B,KAAK2B,OAAQ,IAAI0C,MAAOC,UAExBO,EAAQ7E,KAAKuC,MAAM0C,QAAQjF,KAAK+C,YAE5B/C,KAAKuB,QAAQS,UACfhC,KAAKkF,cAAcL,GAIrBC,EAAM,EAER,KAAK,EACH,GAAMA,IAAQL,KAAKC,MAAMC,OAAO3E,KAAKwB,UAAY,KAAO,CACtDuD,EAAUpE,KAAO,GACjB,MAIF,OADAoE,EAAUpE,KAAO,GACVQ,QAAQgE,MAAM,KAEvB,KAAK,GACH,IAAMnF,KAAKyB,QAASzB,KAAK0B,QAAU,CACjCqD,EAAUpE,KAAO,GACjB,MAGF,OAAOoE,EAAUC,OAAO,UAE1B,KAAK,GACH,IAAKI,SAASC,OAAQ,CACpBN,EAAUpE,KAAO,GACjB,MAGF,OAAOoE,EAAUC,OAAO,WAAY,GAEtC,KAAK,GACHF,IACAC,EAAUpE,KAAO,EACjB,MAEF,KAAK,GACHX,KAAK4B,UAAW,EAChB5B,KAAKwB,SAAWxB,KAAKuB,QAAQO,SAEzB+C,IAAU7E,KAAK2C,iBACjB3C,KAAKiE,WACLjE,KAAKuE,gBAGHvE,KAAKuB,QAAQU,MAAQ4C,IAAU7E,KAAK2C,iBACtC3C,KAAKiE,WACLjE,KAAK8B,YAGT,KAAK,GACL,IAAK,MACH,OAAOiD,EAAUlB,SAGtBe,EAAU5E,WAGhB,CACDN,IAAK,OACLe,MAAO,WACL,IAAI6E,EAAStF,KAEbA,KAAKyB,OAAQ,EACbzB,KAAK4B,UAAW,EAEZ5B,KAAKuB,QAAQO,WACfyD,aAAavF,KAAKwF,OAClBxF,KAAKwF,MAAQC,WAAW,WACtBH,EAAOxD,YACN,QAGN,CACDpC,IAAK,YACLe,MAAO,WACL,IAAK,IAAIvB,EAAI,EAAGA,EAAIc,KAAK0C,UAAWxD,IAClCc,KAAKqC,MAAMnD,GAAGwG,aAAa,QAASxG,EAAEyG,cAGzC,CACDjG,IAAK,cACLe,MAAO,WAGL,IAFA,IAAImF,EAAY,EAEP1G,EAAI,EAAGA,EAAIc,KAAK0C,UAAWxD,IAAK,CACvC,IAAI2G,EAAS7F,KAAKqC,MAAMnD,GAAG4G,uBAAuB,SAAS,GAAGC,aAC1DF,EAASD,IAAWA,EAAYC,GAItC7F,KAAKkC,SAAS4D,uBAAuB,mBAAmB,GAAGE,MAAMH,OAAS,GAAGI,OAAOL,EAAW,QAEhG,CACDlG,IAAK,iBACLe,MAAO,WACL,IAAIuB,EAAWoD,SAASc,cAAc,OACtClE,EAASa,UAAUC,IAAI,YAGvB,IAFA,IAAIqD,EAAcnG,KAAKmC,WAAWiE,YAAYpE,GAErC9C,EAAI,EAAGA,EAAIc,KAAK0C,UAAWxD,IAAK,CACvC,IAAImH,EAAqBjB,SAASc,cAAc,OAChDG,EAAmBxD,UAAUC,IAAI,QACjC,IAAIwD,EAAQlB,SAASc,cAAc,OACnCG,EAAmBD,YAAYE,GAC/BH,EAAYC,YAAYC,MAG3B,CACD3G,IAAK,gBACLe,MAAO,SAAuBoE,GAC5B,OAAO9E,UAAUC,UAAM,OAAQ,EAE/BmD,mBAAmBC,KAAK,SAASmD,IAC/B,IAAIC,EAAgBC,EACpB,OAAOtD,mBAAmBI,KAAK,SAAmBmD,GAChD,OACE,OAAQA,EAAU3E,KAAO2E,EAAU/F,MACjC,KAAK,EACH6F,EAAiB/B,KAAKC,MAAMC,OAAO3E,KAAKwB,UAAYmD,OAAO3E,KAAKuB,QAAQO,UAAY,KACpF2E,EAA6B,MAAnBD,EAAyB,GAA8B,GAAzBA,EAAiB,KAE3D,KAAK,EACH,KAAMC,GAAW,KAAM,CACrBC,EAAU/F,KAAO,GACjB,MAIF,OADA+F,EAAU/F,KAAO,EACVQ,QAAQgE,MAAMR,OAAO3E,KAAKuB,QAAQO,UAAY,KAEvD,KAAK,EAKH,GAJI9B,KAAKyB,OACPzB,KAAK2G,aAAa,EAAG9B,IAGlBO,SAASC,OAAQ,CACpBqB,EAAU/F,KAAO,EACjB,MAGF,OAAO+F,EAAU1B,OAAO,WAAY,GAEtC,KAAK,EACH,IAAMhF,KAAKyB,QAASzB,KAAK0B,QAAU,CACjCgF,EAAU/F,KAAO,GACjB,MAGF,OAAO+F,EAAU1B,OAAO,QAAS,IAEnC,KAAK,GACHhF,KAAK2G,aAAaF,EAAS5B,GAC3B4B,IACAC,EAAU/F,KAAO,EACjB,MAEF,KAAK,GACL,IAAK,MACH,OAAO+F,EAAU7C,SAGtB0C,EAAUvG,WAGhB,CACDN,IAAK,eACLe,MAAO,SAAsBgG,EAAS5B,GACpC,IAAI+B,EAAc5G,KAAKmC,WAAWG,iBAAiB,mBAAmBuC,GAClEyB,EAAQM,EAAYC,qBAAqB,OAAO,GACpDD,EAAY/D,UAAUiE,OAAO,cAC7BR,EAAMN,MAAMe,MAAQ,GAAGd,OAAOQ,EAAS,KAEvB,MAAZA,IACFG,EAAY/D,UAAUC,IAAI,cAC1BwD,EAAMN,MAAMe,MAAQ,QAGvB,CACDrH,IAAK,aACLe,MAAO,WACL,IAAIuG,EAAM5B,SAASc,cAAc,OACjCc,EAAInE,UAAUC,IAAI,QAEe,iBAAtB9C,KAAKuB,QAAQQ,KACtBiF,EAAIC,UAAYjH,KAAKuB,QAAQQ,KAE7BiF,EAAIE,UAAY,IAGlBlH,KAAKmC,WAAWiE,YAAYY,KAE7B,CACDtH,IAAK,aACLe,MAAO,WACL,IAAIuG,EAAM5B,SAASc,cAAc,OACjCc,EAAInE,UAAUC,IAAI,QAEe,iBAAtB9C,KAAKuB,QAAQZ,KACtBqG,EAAIC,UAAYjH,KAAKuB,QAAQZ,KAE7BqG,EAAIE,UAAY,IAGlBlH,KAAKmC,WAAWiE,YAAYY,KAE7B,CACDtH,IAAK,WACLe,MAAO,WACL,IAAI2E,SAASC,OAAb,CACArF,KAAK+C,WAAWF,UAAUiE,OAAO,UACjC,IAAIK,EAAcnH,KAAKuC,MAAM0C,QAAQjF,KAAK+C,YACtCqE,EAAYD,IAAgBnH,KAAK2C,eAAiB,EAAIwE,EAAc,EACpElD,EAAWjE,KAAKqC,MAAM+E,GAC1BnD,EAASpB,UAAUC,IAAI,UACvB9C,KAAK+C,WAAakB,KAEnB,CACDvE,IAAK,WACLe,MAAO,WACL,IAAI2E,SAASC,OAAb,CACArF,KAAK+C,WAAWF,UAAUiE,OAAO,UACjC,IAAIK,EAAcnH,KAAKuC,MAAM0C,QAAQjF,KAAK+C,YACtCsE,EAAYF,EAAc,EAAI,EAAInH,KAAK2C,eAAiBwE,EAAc,EACtErD,EAAW9D,KAAKqC,MAAMgF,GAC1BvD,EAASjB,UAAUC,IAAI,UACvB9C,KAAK+C,WAAae,OAIfzC,EAraT,GA+aA,SAAS8D,MAAMmC,GACb,OAAO,IAAIjH,QAAQ,SAAUkH,GAC3B,OAAO9B,WAAW8B,EAAGD,KATzBpG,QAAiB,QAAIG,SAGrB7B,OAAOC,eAAeyB,QAAS,aAAc,CAC3CT,OAAO,IASTS,QAAQiE,MAAQA","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nclass Carousel {\n    constructor(element, options) {\n        this._timeout = false;\n        this._stop = false;\n        this._paused = false;\n        this._time = 0;\n        this._running = false;\n        const defaults = {\n            autoplay: 0,\n            prev: true,\n            next: true,\n            progress: false,\n            loop: false,\n        };\n        this.options = Object.assign({}, defaults, options);\n        this.carousel = element;\n        this.controller = (this.carousel.querySelector('.carousel__controller'));\n        this.items = this.carousel.querySelectorAll('.carousel__items .item');\n        this.nodes = Array.from(this.items);\n        this.maxLength = this.items.length;\n        this.maxArrayLength = this.maxLength - 1;\n        if (this.maxLength <= 1) {\n            throw new Error('You must have at least two items in your carousel!');\n        }\n        if (!this.carousel.querySelector('.carousel__items .item.active')) {\n            this.items[0].classList.add('active');\n        }\n        this.activeItem = (this.carousel.querySelector('.carousel__items .item.active'));\n        this.buildHeight();\n        this.createKey(); // just for developing to better diff the items\n        this.initCtrl();\n    }\n    initCtrl() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controller) {\n                throw new Error('You must have a controller element if you want to use controlls!');\n            }\n            // with progress\n            if (this.options.progress) {\n                yield this.createProgress();\n            }\n            // on click\n            if (this.options.prev && this.controller) {\n                yield this.createPrev();\n                this.prevCtrl = this.controller.querySelector('.prev');\n                this.prevCtrl.addEventListener('click', () => {\n                    this.stop();\n                    this.prevItem();\n                });\n            }\n            if (this.options.next && this.controller) {\n                yield this.createNext();\n                this.nextCtrl = this.controller.querySelector('.next');\n                this.nextCtrl.addEventListener('click', () => {\n                    this.stop();\n                    this.nextItem();\n                });\n            }\n            // on mouse\n            // this.carousel.addEventListener('mouseover', () => this.mouseOver())\n            // this.carousel.addEventListener('mouseout', () => this.mouseOut())\n            // on autoplay\n            if (this.options.autoplay) {\n                if (typeof this.options.autoplay !== 'number') {\n                    console.error('Autoplay must be type of number!');\n                }\n                else if (this.options.autoplay <= 500) {\n                    console.error('Autoplay must be higher then 500!');\n                }\n                else {\n                    this.autoplay();\n                }\n            }\n        });\n    }\n    mouseOver() {\n        console.log('PAUSE');\n    }\n    mouseOut() {\n        console.log('START');\n    }\n    read() {\n        return new Date().getTime() - this._time;\n    }\n    autoplay() {\n        this._timeout = this.options.autoplay;\n        this.autoplayNext();\n    }\n    pause() {\n        if (this._paused && !this._running)\n            return; // prevent multiple calls\n        // prettier-ignore\n        const pastTime = new Date().getTime() - this._time;\n        this._timeout = Math.round(Number(this._timeout) - pastTime) + 1;\n        this._paused = true;\n        this._running = false;\n        this._time = 0;\n    }\n    play() {\n        if (!this._paused && this._running)\n            return; // prevent multiple calls\n        this._paused = false;\n        this.autoplayNext();\n    }\n    autoplayNext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._running)\n                return;\n            this._running = true;\n            this._time = new Date().getTime(); // start timer\n            const index = this.nodes.indexOf(this.activeItem);\n            if (this.options.progress) {\n                this.startProgress(index);\n            }\n            // sleep\n            let stp = 0;\n            while (stp !== Math.round(Number(this._timeout) / 100)) {\n                yield utils_1.timer(100);\n                if (this._stop || this._paused)\n                    return;\n                if (document.hidden)\n                    continue;\n                stp++;\n            }\n            this._running = false;\n            this._timeout = this.options.autoplay;\n            if (index !== this.maxArrayLength) {\n                this.nextItem();\n                this.autoplayNext();\n            }\n            if (this.options.loop && index === this.maxArrayLength) {\n                this.nextItem();\n                this.autoplay();\n            }\n        });\n    }\n    stop() {\n        this._stop = true;\n        this._running = false;\n        if (this.options.autoplay) {\n            clearTimeout(this._call);\n            this._call = setTimeout(() => {\n                this.autoplay();\n            }, 1000);\n        }\n    }\n    createKey() {\n        for (let i = 0; i < this.maxLength; i++) {\n            this.items[i].setAttribute('index', i.toString());\n        }\n    }\n    buildHeight() {\n        let maxHeight = 0;\n        for (let i = 0; i < this.maxLength; i++) {\n            const height = this.items[i].getElementsByClassName('inner')[0]\n                .offsetHeight;\n            if (height > maxHeight)\n                maxHeight = height;\n        }\n        ;\n        (this.carousel.getElementsByClassName('carousel__items')[0]).style.height = `${maxHeight}px`;\n    }\n    createProgress() {\n        const progress = document.createElement('div');\n        progress.classList.add('progress');\n        const progressEle = this.controller.appendChild(progress);\n        for (let i = 0; i < this.maxLength; i++) {\n            const newProgressBarItem = document.createElement('div');\n            newProgressBarItem.classList.add('item');\n            const inner = document.createElement('div');\n            newProgressBarItem.appendChild(inner);\n            progressEle.appendChild(newProgressBarItem);\n        }\n    }\n    startProgress(index) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const timeoutPrecent = Math.round((Number(this._timeout) / Number(this.options.autoplay)) * 100);\n            let percent = timeoutPrecent === 100 ? 0 : (timeoutPrecent - 100) * -1;\n            while (percent <= 100) {\n                yield utils_1.timer(Number(this.options.autoplay) / 100);\n                if (this._stop) {\n                    this.moveProgress(0, index);\n                }\n                if (document.hidden) {\n                    continue;\n                }\n                if (this._stop || this._paused) {\n                    break;\n                }\n                this.moveProgress(percent, index);\n                percent++;\n            }\n        });\n    }\n    moveProgress(percent, index) {\n        const progressBar = this.controller.querySelectorAll('.progress .item')[index];\n        const inner = progressBar.getElementsByTagName('div')[0];\n        progressBar.classList.remove('transition');\n        inner.style.width = `${percent}%`;\n        if (percent === 100) {\n            progressBar.classList.add('transition');\n            inner.style.width = '0%';\n        }\n    }\n    createPrev() {\n        const div = document.createElement('div');\n        div.classList.add('prev');\n        if (typeof this.options.prev === 'string') {\n            div.innerHTML = this.options.prev;\n        }\n        else {\n            div.innerText = '←';\n        }\n        this.controller.appendChild(div);\n    }\n    createNext() {\n        const div = document.createElement('div');\n        div.classList.add('next');\n        if (typeof this.options.next === 'string') {\n            div.innerHTML = this.options.next;\n        }\n        else {\n            div.innerText = '→';\n        }\n        this.controller.appendChild(div);\n    }\n    nextItem() {\n        if (document.hidden)\n            return;\n        this.activeItem.classList.remove('active');\n        const activeIndex = this.nodes.indexOf(this.activeItem);\n        const nextIndex = activeIndex === this.maxArrayLength ? 0 : activeIndex + 1;\n        const nextItem = this.items[nextIndex];\n        nextItem.classList.add('active');\n        this.activeItem = nextItem;\n    }\n    prevItem() {\n        if (document.hidden)\n            return;\n        this.activeItem.classList.remove('active');\n        const activeIndex = this.nodes.indexOf(this.activeItem);\n        const prevIndex = activeIndex - 1 < 0 ? this.maxArrayLength : activeIndex - 1;\n        const prevItem = this.items[prevIndex];\n        prevItem.classList.add('active');\n        this.activeItem = prevItem;\n    }\n}\nexports.default = Carousel;\n","import { timer } from './utils'\n\nexport interface ICarousel {\n  autoplay: number | boolean\n  prev: string | boolean\n  next: string | boolean\n  progress: boolean\n  loop: boolean\n}\n\nexport default class Carousel {\n  public options: ICarousel\n\n  carousel: Element\n  controller: HTMLElement\n  items: NodeListOf<HTMLElement>\n  nodes: HTMLElement[]\n  maxLength: number\n  maxArrayLength: number\n  activeItem: HTMLElement\n\n  prevCtrl: HTMLElement | null\n  nextCtrl: HTMLElement | null\n\n  private _timeout: number | boolean = false\n  private _stop: boolean = false\n  private _paused: boolean = false\n  private _time: number = 0\n  private _running: boolean = false\n  private _call: NodeJS.Timeout\n\n  constructor(element: Element, options: ICarousel) {\n    const defaults: ICarousel = {\n      autoplay: 0,\n      prev: true,\n      next: true,\n      progress: false,\n      loop: false,\n    }\n\n    this.options = { ...defaults, ...options }\n    this.carousel = element\n    this.controller = <HTMLElement>(\n      this.carousel.querySelector('.carousel__controller')\n    )\n\n    this.items = this.carousel.querySelectorAll('.carousel__items .item')\n    this.nodes = Array.from(this.items)\n    this.maxLength = this.items.length\n    this.maxArrayLength = this.maxLength - 1\n\n    if (this.maxLength <= 1) {\n      throw new Error('You must have at least two items in your carousel!')\n    }\n\n    if (!this.carousel.querySelector('.carousel__items .item.active')) {\n      this.items[0].classList.add('active')\n    }\n\n    this.activeItem = <HTMLElement>(\n      this.carousel.querySelector('.carousel__items .item.active')\n    )\n\n    this.buildHeight()\n    this.createKey() // just for developing to better diff the items\n    this.initCtrl()\n  }\n\n  async initCtrl() {\n    if (!this.controller) {\n      throw new Error(\n        'You must have a controller element if you want to use controlls!'\n      )\n    }\n\n    // with progress\n    if (this.options.progress) {\n      await this.createProgress()\n    }\n\n    // on click\n    if (this.options.prev && this.controller) {\n      await this.createPrev()\n      this.prevCtrl = <HTMLElement>this.controller.querySelector('.prev')\n      this.prevCtrl.addEventListener('click', () => {\n        this.stop()\n        this.prevItem()\n      })\n    }\n    if (this.options.next && this.controller) {\n      await this.createNext()\n      this.nextCtrl = <HTMLElement>this.controller.querySelector('.next')\n      this.nextCtrl.addEventListener('click', () => {\n        this.stop()\n        this.nextItem()\n      })\n    }\n\n    // on mouse\n    // this.carousel.addEventListener('mouseover', () => this.mouseOver())\n    // this.carousel.addEventListener('mouseout', () => this.mouseOut())\n\n    // on autoplay\n    if (this.options.autoplay) {\n      if (typeof this.options.autoplay !== 'number') {\n        console.error('Autoplay must be type of number!')\n      } else if (this.options.autoplay <= 500) {\n        console.error('Autoplay must be higher then 500!')\n      } else {\n        this.autoplay()\n      }\n    }\n  }\n\n  mouseOver() {\n    console.log('PAUSE')\n  }\n\n  mouseOut() {\n    console.log('START')\n  }\n\n  read() {\n    return new Date().getTime() - this._time\n  }\n\n  autoplay() {\n    this._timeout = this.options.autoplay\n    this.autoplayNext()\n  }\n\n  pause() {\n    if (this._paused && !this._running) return // prevent multiple calls\n    // prettier-ignore\n    const pastTime = new Date().getTime() - this._time\n    this._timeout = Math.round(Number(this._timeout) - pastTime) + 1\n    this._paused = true\n    this._running = false\n    this._time = 0\n  }\n\n  play() {\n    if (!this._paused && this._running) return // prevent multiple calls\n    this._paused = false\n    this.autoplayNext()\n  }\n\n  async autoplayNext() {\n    if (this._running) return\n    this._running = true\n    this._time = new Date().getTime() // start timer\n    const index = this.nodes.indexOf(this.activeItem)\n\n    if (this.options.progress) {\n      this.startProgress(index)\n    }\n\n    // sleep\n    let stp = 0\n    while (stp !== Math.round(Number(this._timeout) / 100)) {\n      await timer(100)\n      if (this._stop || this._paused) return\n      if (document.hidden) continue\n      stp++\n    }\n\n    this._running = false\n    this._timeout = this.options.autoplay\n\n    if (index !== this.maxArrayLength) {\n      this.nextItem()\n      this.autoplayNext()\n    }\n\n    if (this.options.loop && index === this.maxArrayLength) {\n      this.nextItem()\n      this.autoplay()\n    }\n  }\n\n  stop() {\n    this._stop = true\n    this._running = false\n    if (this.options.autoplay) {\n      clearTimeout(this._call)\n      this._call = setTimeout(() => {\n        this.autoplay()\n      }, 1000)\n    }\n  }\n\n  createKey() {\n    for (let i = 0; i < this.maxLength; i++) {\n      this.items[i].setAttribute('index', i.toString())\n    }\n  }\n\n  buildHeight() {\n    let maxHeight = 0\n    for (let i = 0; i < this.maxLength; i++) {\n      const height = (<HTMLElement>this.items[i].getElementsByClassName('inner')[0])\n        .offsetHeight\n      if (height > maxHeight) maxHeight = height\n    }\n    ;(<HTMLElement>(\n      this.carousel.getElementsByClassName('carousel__items')[0]\n    )).style.height = `${maxHeight}px`\n  }\n\n  createProgress() {\n    const progress = document.createElement('div')\n    progress.classList.add('progress')\n    const progressEle = this.controller.appendChild(progress)\n    for (let i = 0; i < this.maxLength; i++) {\n      const newProgressBarItem = document.createElement('div')\n      newProgressBarItem.classList.add('item')\n      const inner = document.createElement('div')\n      newProgressBarItem.appendChild(inner)\n      progressEle.appendChild(newProgressBarItem)\n    }\n  }\n\n  async startProgress(index: number) {\n    const timeoutPrecent = Math.round(\n      (Number(this._timeout) / Number(this.options.autoplay)) * 100\n    )\n    let percent = timeoutPrecent === 100 ? 0 : (timeoutPrecent - 100) * -1\n    while (percent <= 100) {\n      await timer(Number(this.options.autoplay) / 100)\n      if (this._stop) {\n        this.moveProgress(0, index)\n      }\n      if (document.hidden) {\n        continue\n      }\n      if (this._stop || this._paused) {\n        break\n      }\n      this.moveProgress(percent, index)\n      percent++\n    }\n  }\n\n  moveProgress(percent: number, index: number) {\n    const progressBar = this.controller.querySelectorAll('.progress .item')[index]\n    const inner = progressBar.getElementsByTagName('div')[0]\n    progressBar.classList.remove('transition')\n    inner.style.width = `${percent}%`\n    if (percent === 100) {\n      progressBar.classList.add('transition')\n      inner.style.width = '0%'\n    }\n  }\n\n  createPrev() {\n    const div = document.createElement('div')\n    div.classList.add('prev')\n    if (typeof this.options.prev === 'string') {\n      div.innerHTML = this.options.prev\n    } else {\n      div.innerText = '←'\n    }\n    this.controller.appendChild(div)\n  }\n\n  createNext() {\n    const div = document.createElement('div')\n    div.classList.add('next')\n    if (typeof this.options.next === 'string') {\n      div.innerHTML = this.options.next\n    } else {\n      div.innerText = '→'\n    }\n    this.controller.appendChild(div)\n  }\n\n  nextItem() {\n    if (document.hidden) return\n    this.activeItem.classList.remove('active')\n    const activeIndex = this.nodes.indexOf(this.activeItem)\n    const nextIndex = activeIndex === this.maxArrayLength ? 0 : activeIndex + 1\n    const nextItem = this.items[nextIndex]\n    nextItem.classList.add('active')\n    this.activeItem = nextItem\n  }\n\n  prevItem() {\n    if (document.hidden) return\n    this.activeItem.classList.remove('active')\n    const activeIndex = this.nodes.indexOf(this.activeItem)\n    const prevIndex = activeIndex - 1 < 0 ? this.maxArrayLength : activeIndex - 1\n    const prevItem = this.items[prevIndex]\n    prevItem.classList.add('active')\n    this.activeItem = prevItem\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction timer(ms) {\n    return new Promise(r => setTimeout(r, ms));\n}\nexports.timer = timer;\n","export function timer(ms: number): Promise<any> {\n  return new Promise(r => setTimeout(r, ms))\n}\n"],"file":"carousel.min.js"}
{"version":3,"sources":["carousel.js","../src/carousel.ts","utils.js","../src/utils.ts"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","utils_1","require","Carousel","element","options","_timeout","_stop","_paused","_time","_running","defaults","autoplay","prev","progress","loop","assign","carousel","controller","querySelector","items","querySelectorAll","nodes","Array","from","maxLength","length","maxArrayLength","Error","classList","add","activeItem","buildHeight","createKey","initCtrl","createProgress","createPrev","prevCtrl","addEventListener","stop","prevItem","createNext","nextCtrl","nextItem","console","error","log","Date","getTime","autoplayNext","pastTime","Math","round","Number","index","indexOf","startProgress","stp","timer","document","hidden","clearTimeout","_call","setTimeout","i","setAttribute","toString","maxHeight","height","getElementsByClassName","offsetHeight","style","createElement","progressEle","appendChild","newProgressBarItem","inner","timeoutPrecent","percent","moveProgress","progressBar","getElementsByTagName","remove","width","div","innerHTML","innerText","activeIndex","nextIndex","prevIndex","ms","r"],"mappings":"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","file":"carousel.js","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nclass Carousel {\n    constructor(element, options) {\n        this._timeout = false;\n        this._stop = false;\n        this._paused = false;\n        this._time = 0;\n        this._running = false;\n        const defaults = {\n            autoplay: 0,\n            prev: true,\n            next: true,\n            progress: false,\n            loop: false,\n        };\n        this.options = Object.assign({}, defaults, options);\n        this.carousel = element;\n        this.controller = (this.carousel.querySelector('.carousel__controller'));\n        this.items = this.carousel.querySelectorAll('.carousel__items .item');\n        this.nodes = Array.from(this.items);\n        this.maxLength = this.items.length;\n        this.maxArrayLength = this.maxLength - 1;\n        if (this.maxLength <= 1) {\n            throw new Error('You must have at least two items in your carousel!');\n        }\n        if (!this.carousel.querySelector('.carousel__items .item.active')) {\n            this.items[0].classList.add('active');\n        }\n        this.activeItem = (this.carousel.querySelector('.carousel__items .item.active'));\n        this.buildHeight();\n        this.createKey(); // just for developing to better diff the items\n        this.initCtrl();\n    }\n    initCtrl() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.controller) {\n                throw new Error('You must have a controller element if you want to use controlls!');\n            }\n            // with progress\n            if (this.options.progress) {\n                yield this.createProgress();\n            }\n            // on click\n            if (this.options.prev && this.controller) {\n                yield this.createPrev();\n                this.prevCtrl = this.controller.querySelector('.prev');\n                this.prevCtrl.addEventListener('click', () => {\n                    this.stop();\n                    this.prevItem();\n                });\n            }\n            if (this.options.next && this.controller) {\n                yield this.createNext();\n                this.nextCtrl = this.controller.querySelector('.next');\n                this.nextCtrl.addEventListener('click', () => {\n                    this.stop();\n                    this.nextItem();\n                });\n            }\n            // on mouse\n            // this.carousel.addEventListener('mouseover', () => this.mouseOver())\n            // this.carousel.addEventListener('mouseout', () => this.mouseOut())\n            // on autoplay\n            if (this.options.autoplay) {\n                if (typeof this.options.autoplay !== 'number') {\n                    console.error('Autoplay must be type of number!');\n                }\n                else if (this.options.autoplay <= 500) {\n                    console.error('Autoplay must be higher then 500!');\n                }\n                else {\n                    this.autoplay();\n                }\n            }\n        });\n    }\n    mouseOver() {\n        console.log('PAUSE');\n    }\n    mouseOut() {\n        console.log('START');\n    }\n    read() {\n        return new Date().getTime() - this._time;\n    }\n    autoplay() {\n        this._timeout = this.options.autoplay;\n        this.autoplayNext();\n    }\n    pause() {\n        if (this._paused && !this._running)\n            return; // prevent multiple calls\n        // prettier-ignore\n        const pastTime = new Date().getTime() - this._time;\n        this._timeout = Math.round(Number(this._timeout) - pastTime) + 1;\n        this._paused = true;\n        this._running = false;\n        this._time = 0;\n    }\n    play() {\n        if (!this._paused && this._running)\n            return; // prevent multiple calls\n        this._paused = false;\n        this.autoplayNext();\n    }\n    autoplayNext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._running)\n                return;\n            this._running = true;\n            this._time = new Date().getTime(); // start timer\n            const index = this.nodes.indexOf(this.activeItem);\n            if (this.options.progress) {\n                this.startProgress(index);\n            }\n            // sleep\n            let stp = 0;\n            while (stp !== Math.round(Number(this._timeout) / 100)) {\n                yield utils_1.timer(100);\n                if (this._stop || this._paused)\n                    return;\n                if (document.hidden)\n                    continue;\n                stp++;\n            }\n            this._running = false;\n            this._timeout = this.options.autoplay;\n            if (index !== this.maxArrayLength) {\n                this.nextItem();\n                this.autoplayNext();\n            }\n            if (this.options.loop && index === this.maxArrayLength) {\n                this.nextItem();\n                this.autoplay();\n            }\n        });\n    }\n    stop() {\n        this._stop = true;\n        this._running = false;\n        if (this.options.autoplay) {\n            clearTimeout(this._call);\n            this._call = setTimeout(() => {\n                this.autoplay();\n            }, 1000);\n        }\n    }\n    createKey() {\n        for (let i = 0; i < this.maxLength; i++) {\n            this.items[i].setAttribute('index', i.toString());\n        }\n    }\n    buildHeight() {\n        let maxHeight = 0;\n        for (let i = 0; i < this.maxLength; i++) {\n            const height = this.items[i].getElementsByClassName('inner')[0]\n                .offsetHeight;\n            if (height > maxHeight)\n                maxHeight = height;\n        }\n        ;\n        (this.carousel.getElementsByClassName('carousel__items')[0]).style.height = `${maxHeight}px`;\n    }\n    createProgress() {\n        const progress = document.createElement('div');\n        progress.classList.add('progress');\n        const progressEle = this.controller.appendChild(progress);\n        for (let i = 0; i < this.maxLength; i++) {\n            const newProgressBarItem = document.createElement('div');\n            newProgressBarItem.classList.add('item');\n            const inner = document.createElement('div');\n            newProgressBarItem.appendChild(inner);\n            progressEle.appendChild(newProgressBarItem);\n        }\n    }\n    startProgress(index) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const timeoutPrecent = Math.round((Number(this._timeout) / Number(this.options.autoplay)) * 100);\n            let percent = timeoutPrecent === 100 ? 0 : (timeoutPrecent - 100) * -1;\n            while (percent <= 100) {\n                yield utils_1.timer(Number(this.options.autoplay) / 100);\n                if (this._stop) {\n                    this.moveProgress(0, index);\n                }\n                if (document.hidden) {\n                    continue;\n                }\n                if (this._stop || this._paused) {\n                    break;\n                }\n                this.moveProgress(percent, index);\n                percent++;\n            }\n        });\n    }\n    moveProgress(percent, index) {\n        const progressBar = this.controller.querySelectorAll('.progress .item')[index];\n        const inner = progressBar.getElementsByTagName('div')[0];\n        progressBar.classList.remove('transition');\n        inner.style.width = `${percent}%`;\n        if (percent === 100) {\n            progressBar.classList.add('transition');\n            inner.style.width = '0%';\n        }\n    }\n    createPrev() {\n        const div = document.createElement('div');\n        div.classList.add('prev');\n        if (typeof this.options.prev === 'string') {\n            div.innerHTML = this.options.prev;\n        }\n        else {\n            div.innerText = '←';\n        }\n        this.controller.appendChild(div);\n    }\n    createNext() {\n        const div = document.createElement('div');\n        div.classList.add('next');\n        if (typeof this.options.next === 'string') {\n            div.innerHTML = this.options.next;\n        }\n        else {\n            div.innerText = '→';\n        }\n        this.controller.appendChild(div);\n    }\n    nextItem() {\n        if (document.hidden)\n            return;\n        this.activeItem.classList.remove('active');\n        const activeIndex = this.nodes.indexOf(this.activeItem);\n        const nextIndex = activeIndex === this.maxArrayLength ? 0 : activeIndex + 1;\n        const nextItem = this.items[nextIndex];\n        nextItem.classList.add('active');\n        this.activeItem = nextItem;\n    }\n    prevItem() {\n        if (document.hidden)\n            return;\n        this.activeItem.classList.remove('active');\n        const activeIndex = this.nodes.indexOf(this.activeItem);\n        const prevIndex = activeIndex - 1 < 0 ? this.maxArrayLength : activeIndex - 1;\n        const prevItem = this.items[prevIndex];\n        prevItem.classList.add('active');\n        this.activeItem = prevItem;\n    }\n}\nexports.default = Carousel;\n","import { timer } from './utils'\n\nexport interface ICarousel {\n  autoplay: number | boolean\n  prev: string | boolean\n  next: string | boolean\n  progress: boolean\n  loop: boolean\n}\n\nexport default class Carousel {\n  public options: ICarousel\n\n  carousel: Element\n  controller: HTMLElement\n  items: NodeListOf<HTMLElement>\n  nodes: HTMLElement[]\n  maxLength: number\n  maxArrayLength: number\n  activeItem: HTMLElement\n\n  prevCtrl: HTMLElement | null\n  nextCtrl: HTMLElement | null\n\n  private _timeout: number | boolean = false\n  private _stop: boolean = false\n  private _paused: boolean = false\n  private _time: number = 0\n  private _running: boolean = false\n  private _call: NodeJS.Timeout\n\n  constructor(element: Element, options: ICarousel) {\n    const defaults: ICarousel = {\n      autoplay: 0,\n      prev: true,\n      next: true,\n      progress: false,\n      loop: false,\n    }\n\n    this.options = { ...defaults, ...options }\n    this.carousel = element\n    this.controller = <HTMLElement>(\n      this.carousel.querySelector('.carousel__controller')\n    )\n\n    this.items = this.carousel.querySelectorAll('.carousel__items .item')\n    this.nodes = Array.from(this.items)\n    this.maxLength = this.items.length\n    this.maxArrayLength = this.maxLength - 1\n\n    if (this.maxLength <= 1) {\n      throw new Error('You must have at least two items in your carousel!')\n    }\n\n    if (!this.carousel.querySelector('.carousel__items .item.active')) {\n      this.items[0].classList.add('active')\n    }\n\n    this.activeItem = <HTMLElement>(\n      this.carousel.querySelector('.carousel__items .item.active')\n    )\n\n    this.buildHeight()\n    this.createKey() // just for developing to better diff the items\n    this.initCtrl()\n  }\n\n  async initCtrl() {\n    if (!this.controller) {\n      throw new Error(\n        'You must have a controller element if you want to use controlls!'\n      )\n    }\n\n    // with progress\n    if (this.options.progress) {\n      await this.createProgress()\n    }\n\n    // on click\n    if (this.options.prev && this.controller) {\n      await this.createPrev()\n      this.prevCtrl = <HTMLElement>this.controller.querySelector('.prev')\n      this.prevCtrl.addEventListener('click', () => {\n        this.stop()\n        this.prevItem()\n      })\n    }\n    if (this.options.next && this.controller) {\n      await this.createNext()\n      this.nextCtrl = <HTMLElement>this.controller.querySelector('.next')\n      this.nextCtrl.addEventListener('click', () => {\n        this.stop()\n        this.nextItem()\n      })\n    }\n\n    // on mouse\n    // this.carousel.addEventListener('mouseover', () => this.mouseOver())\n    // this.carousel.addEventListener('mouseout', () => this.mouseOut())\n\n    // on autoplay\n    if (this.options.autoplay) {\n      if (typeof this.options.autoplay !== 'number') {\n        console.error('Autoplay must be type of number!')\n      } else if (this.options.autoplay <= 500) {\n        console.error('Autoplay must be higher then 500!')\n      } else {\n        this.autoplay()\n      }\n    }\n  }\n\n  mouseOver() {\n    console.log('PAUSE')\n  }\n\n  mouseOut() {\n    console.log('START')\n  }\n\n  read() {\n    return new Date().getTime() - this._time\n  }\n\n  autoplay() {\n    this._timeout = this.options.autoplay\n    this.autoplayNext()\n  }\n\n  pause() {\n    if (this._paused && !this._running) return // prevent multiple calls\n    // prettier-ignore\n    const pastTime = new Date().getTime() - this._time\n    this._timeout = Math.round(Number(this._timeout) - pastTime) + 1\n    this._paused = true\n    this._running = false\n    this._time = 0\n  }\n\n  play() {\n    if (!this._paused && this._running) return // prevent multiple calls\n    this._paused = false\n    this.autoplayNext()\n  }\n\n  async autoplayNext() {\n    if (this._running) return\n    this._running = true\n    this._time = new Date().getTime() // start timer\n    const index = this.nodes.indexOf(this.activeItem)\n\n    if (this.options.progress) {\n      this.startProgress(index)\n    }\n\n    // sleep\n    let stp = 0\n    while (stp !== Math.round(Number(this._timeout) / 100)) {\n      await timer(100)\n      if (this._stop || this._paused) return\n      if (document.hidden) continue\n      stp++\n    }\n\n    this._running = false\n    this._timeout = this.options.autoplay\n\n    if (index !== this.maxArrayLength) {\n      this.nextItem()\n      this.autoplayNext()\n    }\n\n    if (this.options.loop && index === this.maxArrayLength) {\n      this.nextItem()\n      this.autoplay()\n    }\n  }\n\n  stop() {\n    this._stop = true\n    this._running = false\n    if (this.options.autoplay) {\n      clearTimeout(this._call)\n      this._call = setTimeout(() => {\n        this.autoplay()\n      }, 1000)\n    }\n  }\n\n  createKey() {\n    for (let i = 0; i < this.maxLength; i++) {\n      this.items[i].setAttribute('index', i.toString())\n    }\n  }\n\n  buildHeight() {\n    let maxHeight = 0\n    for (let i = 0; i < this.maxLength; i++) {\n      const height = (<HTMLElement>this.items[i].getElementsByClassName('inner')[0])\n        .offsetHeight\n      if (height > maxHeight) maxHeight = height\n    }\n    ;(<HTMLElement>(\n      this.carousel.getElementsByClassName('carousel__items')[0]\n    )).style.height = `${maxHeight}px`\n  }\n\n  createProgress() {\n    const progress = document.createElement('div')\n    progress.classList.add('progress')\n    const progressEle = this.controller.appendChild(progress)\n    for (let i = 0; i < this.maxLength; i++) {\n      const newProgressBarItem = document.createElement('div')\n      newProgressBarItem.classList.add('item')\n      const inner = document.createElement('div')\n      newProgressBarItem.appendChild(inner)\n      progressEle.appendChild(newProgressBarItem)\n    }\n  }\n\n  async startProgress(index: number) {\n    const timeoutPrecent = Math.round(\n      (Number(this._timeout) / Number(this.options.autoplay)) * 100\n    )\n    let percent = timeoutPrecent === 100 ? 0 : (timeoutPrecent - 100) * -1\n    while (percent <= 100) {\n      await timer(Number(this.options.autoplay) / 100)\n      if (this._stop) {\n        this.moveProgress(0, index)\n      }\n      if (document.hidden) {\n        continue\n      }\n      if (this._stop || this._paused) {\n        break\n      }\n      this.moveProgress(percent, index)\n      percent++\n    }\n  }\n\n  moveProgress(percent: number, index: number) {\n    const progressBar = this.controller.querySelectorAll('.progress .item')[index]\n    const inner = progressBar.getElementsByTagName('div')[0]\n    progressBar.classList.remove('transition')\n    inner.style.width = `${percent}%`\n    if (percent === 100) {\n      progressBar.classList.add('transition')\n      inner.style.width = '0%'\n    }\n  }\n\n  createPrev() {\n    const div = document.createElement('div')\n    div.classList.add('prev')\n    if (typeof this.options.prev === 'string') {\n      div.innerHTML = this.options.prev\n    } else {\n      div.innerText = '←'\n    }\n    this.controller.appendChild(div)\n  }\n\n  createNext() {\n    const div = document.createElement('div')\n    div.classList.add('next')\n    if (typeof this.options.next === 'string') {\n      div.innerHTML = this.options.next\n    } else {\n      div.innerText = '→'\n    }\n    this.controller.appendChild(div)\n  }\n\n  nextItem() {\n    if (document.hidden) return\n    this.activeItem.classList.remove('active')\n    const activeIndex = this.nodes.indexOf(this.activeItem)\n    const nextIndex = activeIndex === this.maxArrayLength ? 0 : activeIndex + 1\n    const nextItem = this.items[nextIndex]\n    nextItem.classList.add('active')\n    this.activeItem = nextItem\n  }\n\n  prevItem() {\n    if (document.hidden) return\n    this.activeItem.classList.remove('active')\n    const activeIndex = this.nodes.indexOf(this.activeItem)\n    const prevIndex = activeIndex - 1 < 0 ? this.maxArrayLength : activeIndex - 1\n    const prevItem = this.items[prevIndex]\n    prevItem.classList.add('active')\n    this.activeItem = prevItem\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction timer(ms) {\n    return new Promise(r => setTimeout(r, ms));\n}\nexports.timer = timer;\n","export function timer(ms: number): Promise<any> {\n  return new Promise(r => setTimeout(r, ms))\n}\n"]}